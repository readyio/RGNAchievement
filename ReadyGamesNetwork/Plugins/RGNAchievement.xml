<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RGNAchievement</name>
    </assembly>
    <members>
        <member name="T:RGN.Modules.Achievement.AchievementsModule">
            <summary>
            This module is responsible for achievements
            You can create new achievements using the developers dashboard
            When you trigger the achievements the user can receive 3 types of rewards:
            1. Coin currencies rewards - adds coins to users data
            2. Virtual Items rewards - adds virtual items to users inventory
            3. Progression rewards - adds progression points to users progression data (see GameProgressModule.GetUserProgressionDataAsync())
            </summary>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.SetRGNCore(RGN.IRGNRolesCore)">
            <summary>
            Sets the Ready Games Network (RGN) core reference.
            </summary>
            <param name="rgnCore">The RGN core to be set.</param>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.Init">
            <summary>
            Initializes the AchievementsModule.
            This method is currently empty and can be filled with initial setup logic if needed in the future.
            </summary>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.Dispose">
            <summary>
            Releases all resources used by the AchievementsModule.
            This method is currently empty and can be filled with cleanup logic if needed in the future.
            </summary>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.GetByIdsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Asynchronously retrieves a list of achievements from the Ready Games Network (RGN)
            based on the provided achievements identifiers.
            </summary>
            <param name="ids">A list of application identifiers used to filter the achievements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided ids list is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Achievement.AchievementData"/> objects representing the achievements that match the specified identifiers.</returns>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.GetByAppIdsAsync(System.Collections.Generic.List{System.String},System.Int32,System.String)">
            <summary>
            Asynchronously retrieves a list of achievements from the Ready Games Network (RGN) store based on
            the provided application identifiers.
            </summary>
            <param name="appIds">A list of application identifiers used to filter the store offers.</param>
            <param name="limit">An integer indicating the maximum number of achievements to retrieve.</param>
            <param name="startAfter">An optional parameter representing an achievement id after which to
            start retrieving the achievements. The default is an empty string.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided appIds list is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Achievement.AchievementData"/> objects representing the achievements that match the specified application identifiers,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.GetForCurrentAppAsync(System.Int32,System.String)">
            <summary>
            Asynchronously retrieves a list of achievements for the current application from the Ready Games Network (RGN).
            </summary>
            <param name="limit">An integer indicating the maximum number of achievements to retrieve.</param>
            <param name="startAfter">An optional parameter representing an achievement id after which to
            start retrieving the achievements. The default is an empty string.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list
            of <see cref="T:RGN.Modules.Achievement.AchievementData"/> objects representing the achievements that match the current application identifier,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.GetByAppIdsWithUserDataAsync(System.Collections.Generic.List{System.String},System.Int32,System.String,System.Boolean)">
            <summary>
            Asynchronously retrieves a list of achievements from the Ready Games Network (RGN) based on
            the provided application identifiers. The user achievement data is also returned in case user made any progress
            with the given achievement
            </summary>
            <param name="appIds">A list of application identifiers used to filter the store offers.</param>
            <param name="limit">An integer indicating the maximum number of achievements to retrieve.</param>
            <param name="startAfter">An optional parameter representing an achievement id after which to
            start retrieving the achievements. The default is an empty string.</param>
            <param name="withHistory">An optional parameter to request the user achievements with the history entries. 
            The default is false</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided appIds list is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Achievement.AchievementWithUserData"/> objects representing the achievements that match the specified application identifiers,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.GetForCurrentAppWithUserDataAsync(System.Int32,System.String)">
            <summary>
            Asynchronously retrieves a list of achievements for the current application from the Ready Games Network (RGN).
            The user achievement data is also returned in case user made any progress with the given achievement
            </summary>
            <param name="limit">An integer indicating the maximum number of achievements to retrieve.</param>
            <param name="startAfter">An optional parameter representing an achievement id after which to
            start retrieving the achievements. The default is an empty string.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list
            of <see cref="T:RGN.Modules.Achievement.AchievementWithUserData"/> objects representing the achievements that match the current application identifier,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.GetByRequestNameAsync(System.String)">
            <summary>
            Asynchronously retrieves a list of achievements from the Ready Games Network (RGN)
            based on the provided achievement request name.
            </summary>
            <param name="requestName">Request name to filter achievements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided request name is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Achievement.AchievementData"/> objects representing the achievements that match the specified identifiers.</returns>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.TriggerByIdAsync(System.String,System.Int32)">
            <summary>
            Triggers the achievement by id to make achievement progress
            </summary>
            <param name="id">The achievement id to trigger</param>
            <param name="progress">The achievement trigger progress delta</param>
            <returns>Achievement Id</returns>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.TriggerByRequestNameAsync(System.String,System.Int32)">
            <summary>
            Triggers the achievement by request name to make achievement progress
            </summary>
            <param name="requestName">The achievement request name to trigger</param>
            <param name="progress">The achievement trigger progress delta</param>
            <returns>Achievement Id</returns>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.ClaimAsync(System.String)">
            <summary>
            Claim the achievement to give rewards to the user
            For more information about the rewards see <see cref="T:RGN.Modules.Achievement.AchievementData"/> class
            </summary>
            <param name="id">The achievement id to trigger</param>
            <returns>Achievement Id</returns>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementsModule.GetUserAchievementsAsync(System.String,System.Int64,System.Int32)">
            <summary>
            Gets current user competed achievements
            If the <paramref name="userId"/> is provided, then it returns the comleted achievements for provided userId
            Supports pagination queries in case the <paramref name="startAfter"/> and <paramref name="limit"/> are provided
            </summary>
            <param name="userId">User id to return the completed achievements</param>
            <param name="startAfter">The time stamp to start the query after <see cref="F:RGN.Modules.Achievement.UserAchievement.lastCompleteTime"/></param>
            <param name="limit">Maximal number of documents to return</param>
            <returns>Requested amount of completed achievements</returns>
        </member>
        <member name="T:RGN.Modules.Achievement.AchievementData">
            <summary>
            Represents achievement data from the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.id">
            <summary>
            Achievement document id. To trigger an achievement the id is needed
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.appIds">
            <summary>
            List of application ids where this achievement is used
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.requestName">
            <summary>
            Achievement request name. This value can be used to query or trigger achievements
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.name">
            <summary>
            Achievement name. This value can be null or empty
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.description">
            <summary>
            Achievement description. This value can be null or empty
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.setBy">
            <summary>
            Define who can trigger/claim the achievement
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.isClaimable">
            <summary>
            Should the achievement be claim manually
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.valueToReach">
            <summary>
            Value which should be reached to complete the achievement
            Default is 1
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.completedAchievementsToUnlock">
            <summary>
            Achievement ids which should be completed before this achievement can be triggered
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.repeatable">
            <summary>
            Can this achievement be applied multiple times to the same user account
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.repeatNoMoreOftenThanCron">
            <summary>
            If this is provided, the the trigger for this achievement will work no more
            often that the specified cron string.
            *    *    *    *    *    *
            ┬    ┬    ┬    ┬    ┬    ┬
            │    │    │    │    │    |
            │    │    │    │    │    └ day of week(0 - 7, 1L - 7L) (0 or 7 is Sun)
            │    │    │    │    └───── month(1 - 12)
            │    │    │    └────────── day of month(1 - 31, L)
            │    │    └─────────────── hour(0 - 23)
            │    └──────────────────── minute(0 - 59)
            └───────────────────────── second(0 - 59, optional)
            You can use the https://crontab.guru/ to create cron settings
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.startTime">
            <summary>
            Start time of the achievement, when it can be available for users
            in milliseconds since midnight, January 1, 1970 UTC.
            Refer to <see cref="T:RGN.Utility.DateTimeUtility"/> for helper methods.
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.endTime">
            <summary>
            End time of the achievement, when it becomes unavailable for users
            in milliseconds since midnight, January 1, 1970 UTC.
            Refer to <see cref="T:RGN.Utility.DateTimeUtility"/> for helper methods.
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.resetTimeLimitEvery">
            <summary>
            Define cron value when the achievement should reset. This parameter is used
            to update the <see cref="F:RGN.Modules.Achievement.AchievementData.startTime"/> and <see cref="F:RGN.Modules.Achievement.AchievementData.endTime"/> values.
            *    *    *    *    *    *
            ┬    ┬    ┬    ┬    ┬    ┬
            │    │    │    │    │    |
            │    │    │    │    │    └ day of week(0 - 7, 1L - 7L) (0 or 7 is Sun)
            │    │    │    │    └───── month(1 - 12)
            │    │    │    └────────── day of month(1 - 31, L)
            │    │    └─────────────── hour(0 - 23)
            │    └──────────────────── minute(0 - 59)
            └───────────────────────── second(0 - 59, optional)
            You can use the https://crontab.guru/ to create cron settings
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.rewards">
            <summary>
            Achievement rewards ids and quantity rewards to add to users when
            the achievement is triggered
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.createdAt">
            <summary>
            Time when the achievement was created
            in milliseconds since midnight, January 1, 1970 UTC.
            Refer to <see cref="T:RGN.Utility.DateTimeUtility"/> for helper methods.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.updatedAt">
            <summary>
            Time when the achievement was updated
            in milliseconds since midnight, January 1, 1970 UTC.
            Refer to <see cref="T:RGN.Utility.DateTimeUtility"/> for helper methods.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.createdBy">
            <summary>
            Creator user id
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementData.updatedBy">
            <summary>
            Updater user id
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="T:RGN.Modules.Achievement.AchievementReward">
            <summary>
            This class represents the AchievementReward in the Ready Games Network (RGN) Unity SDK's AchievementsModule.
            An AchievementReward is a generic type of reward that can be earned by the user upon completing an achievement.
            This could be a Virtual Item, Currency Coins, or Progression reward, depending on the `type`.
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementReward.type">
            <summary>
            The type of reward this achievement offers. 
            This could be "virtualItem", "currency", or "progression"
            to match the different types of reward systems available.
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementReward.appIds">
            <summary>
            The list of application IDs for which this achievement reward is applicable. 
            This allows rewards to be scoped to specific applications within a developer's portfolio.
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementReward.name">
            <summary>
            The name of the reward. This could be the id of the virtual item, currency name, or progression id.
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.AchievementReward.quantity">
            <summary>
            The quantity of the reward that will be given to the user upon completing the achievement.
            For "virtualItem" and "currency", it represents the number of items or coins rewarded.
            For "progression", it represents the increment value for the user's progression.
            </summary>
        </member>
        <member name="T:RGN.Modules.Achievement.AchievementWithUserData">
            <summary>
            Represents achievement data from the backend
            </summary>
        </member>
        <member name="M:RGN.Modules.Achievement.AchievementWithUserData.GetUserAchievement">
            <summary>
            Get user achievement. This method can return null in case the user
            have not made any progress with the achievement
            </summary>
            <returns>User Achievement data</returns>
        </member>
        <member name="T:RGN.Modules.Achievement.CompletedAchievementHistoryEntry">
            <summary>
            Represents completed achievement history entry for a given achievement
            This data is comming from the users data
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.CompletedAchievementHistoryEntry.id">
            <summary>
            Achievement document id
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.CompletedAchievementHistoryEntry.valueToReach">
            <summary>
            Value which should be reached to complete the achievement when
            the achievement was triggered
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.CompletedAchievementHistoryEntry.rewards">
            <summary>
            Achievement rewards ids and quantity rewards to add to users when
            the achievement is triggered
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.CompletedAchievementHistoryEntry.completeTime">
            <summary>
            Time when the achievement triggered
            in milliseconds since midnight, January 1, 1970 UTC.
            Refer to <see cref="T:RGN.Utility.DateTimeUtility"/> for helper methods.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="T:RGN.Modules.Achievement.UserAchievement">
            <summary>
            Represents completed achievement data from the users data
            If the achievement is <see cref="F:RGN.Modules.Achievement.AchievementData.repeatable"/> then
            this document can contain more that one 
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.UserAchievement.id">
            <summary>
            Achievement document id
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.UserAchievement.value">
            <summary>
            Current progress value of the achievement
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.UserAchievement.valueToReach">
            <summary>
            Value which should be reached to complete the achievement when
            the achievement was triggered
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.UserAchievement.isCompleted">
            <summary>
            Shows if the achievement was completed
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.UserAchievement.isClaimed">
            <summary>
            Shows if the achievement was claimed
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.UserAchievement.lastCompleteTime">
            <summary>
            Time when the achievement was last time completed
            in milliseconds since midnight, January 1, 1970 UTC.
            Refer to <see cref="T:RGN.Utility.DateTimeUtility"/> for helper methods.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Achievement.UserAchievement.history">
            <summary>
            Represents all times the user completed this achievement
            This collection can contain more than 1 item in case the
            <see cref="F:RGN.Modules.Achievement.AchievementData.repeatable"/> is true
            </summary>
        </member>
    </members>
</doc>
